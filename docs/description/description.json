[
  {
    "patternId": "anyobject_protocol",
    "title": "AnyObject Protocol",
    "description": "Prefer using `AnyObject` over `class` for class-only protocols."
  },
  {
    "patternId": "array_init",
    "title": "Array Init",
    "description": "Prefer using `Array(seq)` over `seq.map { $0 }` to convert a sequence into an Array."
  },
  {
    "patternId": "attributes",
    "title": "Attributes",
    "description": "Attributes should be on their own lines in functions and types, but on the same line as variables and imports."
  },
  {
    "patternId": "block_based_kvo",
    "title": "Block Based KVO",
    "description": "Prefer the new block based KVO API with keypaths when using Swift 3.2 or later."
  },
  {
    "patternId": "class_delegate_protocol",
    "title": "Class Delegate Protocol",
    "description": "Delegate protocols should be class-only so they can be weakly referenced."
  },
  {
    "patternId": "closing_brace",
    "title": "Closing Brace Spacing",
    "description": "Closing brace with closing parenthesis should not have any whitespaces in the middle."
  },
  {
    "patternId": "closure_body_length",
    "title": "Closure Body Length",
    "description": "Closure bodies should not span too many lines."
  },
  {
    "patternId": "closure_end_indentation",
    "title": "Closure End Indentation",
    "description": "Closure end should have the same indentation as the line that started it."
  },
  {
    "patternId": "closure_parameter_position",
    "title": "Closure Parameter Position",
    "description": "Closure parameters should be on the same line as opening brace."
  },
  {
    "patternId": "closure_spacing",
    "title": "Closure Spacing",
    "description": "Closure expressions should have a single space inside each brace."
  },
  {
    "patternId": "collection_alignment",
    "title": "Collection Element Alignment",
    "description": "All elements in a collection literal should be vertically aligned"
  },
  {
    "patternId": "colon",
    "title": "Colon",
    "description": "Colons should be next to the identifier when specifying a type and next to the key in dictionary literals."
  },
  {
    "patternId": "comma",
    "title": "Comma Spacing",
    "description": "There should be no space before and one after any comma."
  },
  {
    "patternId": "compiler_protocol_init",
    "title": "Compiler Protocol Init",
    "description": "The initializers declared in compiler protocols such as `ExpressibleByArrayLiteral` shouldn't be called directly."
  },
  {
    "patternId": "conditional_returns_on_newline",
    "title": "Conditional Returns on Newline",
    "description": "Conditional statements should always return on the next line"
  },
  {
    "patternId": "contains_over_filter_count",
    "title": "Contains Over Filter Count",
    "description": "Prefer `contains` over comparing `filter(where:).count` to 0."
  },
  {
    "patternId": "contains_over_filter_is_empty",
    "title": "Contains Over Filter Is Empty",
    "description": "Prefer `contains` over using `filter(where:).isEmpty`"
  },
  {
    "patternId": "contains_over_first_not_nil",
    "title": "Contains over first not nil",
    "description": "Prefer `contains` over `first(where:) != nil` and `firstIndex(where:) != nil`."
  },
  {
    "patternId": "contains_over_range_nil_comparison",
    "title": "Contains over range(of:) comparison to nil",
    "description": "Prefer `contains` over `range(of:) != nil` and `range(of:) == nil`."
  },
  {
    "patternId": "control_statement",
    "title": "Control Statement",
    "description": "`if`, `for`, `guard`, `switch`, `while`, and `catch` statements shouldn't unnecessarily wrap their conditionals or arguments in parentheses."
  },
  {
    "patternId": "convenience_type",
    "title": "Convenience Type",
    "description": "Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation."
  },
  {
    "patternId": "custom_rules",
    "title": "Custom Rules",
    "description": "Create custom rules by providing a regex string. Optionally specify what syntax kinds to match against, the severity level, and what message to display."
  },
  {
    "patternId": "cyclomatic_complexity",
    "title": "Cyclomatic Complexity",
    "description": "Complexity of function bodies should be limited."
  },
  {
    "patternId": "deployment_target",
    "title": "Deployment Target",
    "description": "Availability checks or attributes shouldn't be using older versions that are satisfied by the deployment target."
  },
  {
    "patternId": "discarded_notification_center_observer",
    "title": "Discarded Notification Center Observer",
    "description": "When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later."
  },
  {
    "patternId": "discouraged_direct_init",
    "title": "Discouraged Direct Initialization",
    "description": "Discouraged direct initialization of types that can be harmful."
  },
  {
    "patternId": "discouraged_object_literal",
    "title": "Discouraged Object Literal",
    "description": "Prefer initializers over object literals."
  },
  {
    "patternId": "discouraged_optional_boolean",
    "title": "Discouraged Optional Boolean",
    "description": "Prefer non-optional booleans over optional booleans."
  },
  {
    "patternId": "discouraged_optional_collection",
    "title": "Discouraged Optional Collection",
    "description": "Prefer empty collection over optional collection."
  },
  {
    "patternId": "duplicate_enum_cases",
    "title": "Duplicate Enum Cases",
    "description": "Enum can't contain multiple cases with the same name."
  },
  {
    "patternId": "duplicate_imports",
    "title": "Duplicate Imports",
    "description": "Imports should be unique."
  },
  {
    "patternId": "dynamic_inline",
    "title": "Dynamic Inline",
    "description": "Avoid using 'dynamic' and '@inline(__always)' together."
  },
  {
    "patternId": "empty_collection_literal",
    "title": "Empty Collection Literal",
    "description": "Prefer checking `isEmpty` over comparing collection to an empty array or dictionary literal."
  },
  {
    "patternId": "empty_count",
    "title": "Empty Count",
    "description": "Prefer checking `isEmpty` over comparing `count` to zero."
  },
  {
    "patternId": "empty_enum_arguments",
    "title": "Empty Enum Arguments",
    "description": "Arguments can be omitted when matching enums with associated types if they are not used."
  },
  {
    "patternId": "empty_parameters",
    "title": "Empty Parameters",
    "description": "Prefer `() -> ` over `Void -> `."
  },
  {
    "patternId": "empty_parentheses_with_trailing_closure",
    "title": "Empty Parentheses with Trailing Closure",
    "description": "When using trailing closures, empty parentheses should be avoided after the method call."
  },
  {
    "patternId": "empty_string",
    "title": "Empty String",
    "description": "Prefer checking `isEmpty` over comparing `string` to an empty string literal."
  },
  {
    "patternId": "empty_xctest_method",
    "title": "Empty XCTest Method",
    "description": "Empty XCTest method should be avoided."
  },
  {
    "patternId": "enum_case_associated_values_count",
    "title": "Enum Case Associated Values Count",
    "description": "Number of associated values in an enum case should be low"
  },
  {
    "patternId": "expiring_todo",
    "title": "ExpiringTodo",
    "description": "TODOs and FIXMEs should be resolved prior to their expiry date."
  },
  {
    "patternId": "explicit_acl",
    "title": "Explicit ACL",
    "description": "All declarations should specify Access Control Level keywords explicitly."
  },
  {
    "patternId": "explicit_enum_raw_value",
    "title": "Explicit Enum Raw Value",
    "description": "Enums should be explicitly assigned their raw values."
  },
  {
    "patternId": "explicit_init",
    "title": "Explicit Init",
    "description": "Explicitly calling .init() should be avoided."
  },
  {
    "patternId": "explicit_self",
    "title": "Explicit Self",
    "description": "Instance variables and functions should be explicitly accessed with 'self.'."
  },
  {
    "patternId": "explicit_top_level_acl",
    "title": "Explicit Top Level ACL",
    "description": "Top-level declarations should specify Access Control Level keywords explicitly."
  },
  {
    "patternId": "explicit_type_interface",
    "title": "Explicit Type Interface",
    "description": "Properties should have a type interface"
  },
  {
    "patternId": "extension_access_modifier",
    "title": "Extension Access Modifier",
    "description": "Prefer to use extension access modifiers"
  },
  {
    "patternId": "fallthrough",
    "title": "Fallthrough",
    "description": "Fallthrough should be avoided."
  },
  {
    "patternId": "fatal_error_message",
    "title": "Fatal Error Message",
    "description": "A fatalError call should have a message."
  },
  {
    "patternId": "file_header",
    "title": "File Header",
    "description": "Header comments should be consistent with project patterns. The SWIFTLINT_CURRENT_FILENAME placeholder can optionally be used in the required and forbidden patterns. It will be replaced by the real file name."
  },
  {
    "patternId": "file_length",
    "title": "File Line Length",
    "description": "Files should not span too many lines."
  },
  {
    "patternId": "file_name",
    "title": "File Name",
    "description": "File name should match a type or extension declared in the file (if any)."
  },
  {
    "patternId": "file_name_no_space",
    "title": "File Name No Space",
    "description": "File name should not contain any whitespace."
  },
  {
    "patternId": "file_types_order",
    "title": "File Types Order",
    "description": "Specifies how the types within a file should be ordered."
  },
  {
    "patternId": "first_where",
    "title": "First Where",
    "description": "Prefer using `.first(where:)` over `.filter { }.first` in collections."
  },
  {
    "patternId": "flatmap_over_map_reduce",
    "title": "FlatMap over map and reduce",
    "description": "Prefer `flatMap` over `map` followed by `reduce([], +)`."
  },
  {
    "patternId": "for_where",
    "title": "For Where",
    "description": "`where` clauses are preferred over a single `if` inside a `for`."
  },
  {
    "patternId": "force_cast",
    "title": "Force Cast",
    "description": "Force casts should be avoided."
  },
  {
    "patternId": "force_try",
    "title": "Force Try",
    "description": "Force tries should be avoided."
  },
  {
    "patternId": "force_unwrapping",
    "title": "Force Unwrapping",
    "description": "Force unwrapping should be avoided."
  },
  {
    "patternId": "function_body_length",
    "title": "Function Body Length",
    "description": "Functions bodies should not span too many lines."
  },
  {
    "patternId": "function_default_parameter_at_end",
    "title": "Function Default Parameter at End",
    "description": "Prefer to locate parameters with defaults toward the end of the parameter list."
  },
  {
    "patternId": "function_parameter_count",
    "title": "Function Parameter Count",
    "description": "Number of function parameters should be low."
  },
  {
    "patternId": "generic_type_name",
    "title": "Generic Type Name",
    "description": "Generic type name should only contain alphanumeric characters, start with an uppercase character and span between 1 and 20 characters in length."
  },
  {
    "patternId": "identical_operands",
    "title": "Identical Operands",
    "description": "Comparing two identical operands is likely a mistake."
  },
  {
    "patternId": "identifier_name",
    "title": "Identifier Name",
    "description": "Identifier names should only contain alphanumeric characters and start with a lowercase character or should only contain capital letters. In an exception to the above, variable names may start with a capital letter when they are declared static and immutable. Variable names should not be too long or too short."
  },
  {
    "patternId": "implicit_getter",
    "title": "Implicit Getter",
    "description": "Computed read-only properties and subscripts should avoid using the get keyword."
  },
  {
    "patternId": "implicit_return",
    "title": "Implicit Return",
    "description": "Prefer implicit returns in closures, functions and getters."
  },
  {
    "patternId": "implicitly_unwrapped_optional",
    "title": "Implicitly Unwrapped Optional",
    "description": "Implicitly unwrapped optionals should be avoided when possible."
  },
  {
    "patternId": "indentation_width",
    "title": "Indentation Width",
    "description": "Indent code using either one tab or the configured amount of spaces, unindent to match previous indentations. Don't indent the first line."
  },
  {
    "patternId": "inert_defer",
    "title": "Inert Defer",
    "description": "If defer is at the end of its parent scope, it will be executed right where it is anyway."
  },
  {
    "patternId": "is_disjoint",
    "title": "Is Disjoint",
    "description": "Prefer using `Set.isDisjoint(with:)` over `Set.intersection(_:).isEmpty`."
  },
  {
    "patternId": "joined_default_parameter",
    "title": "Joined Default Parameter",
    "description": "Discouraged explicit usage of the default separator."
  },
  {
    "patternId": "large_tuple",
    "title": "Large Tuple",
    "description": "Tuples shouldn't have too many members. Create a custom type instead."
  },
  {
    "patternId": "last_where",
    "title": "Last Where",
    "description": "Prefer using `.last(where:)` over `.filter { }.last` in collections."
  },
  {
    "patternId": "leading_whitespace",
    "title": "Leading Whitespace",
    "description": "Files should not contain leading whitespace."
  },
  {
    "patternId": "legacy_cggeometry_functions",
    "title": "Legacy CGGeometry Functions",
    "description": "Struct extension properties and methods are preferred over legacy functions"
  },
  {
    "patternId": "legacy_constant",
    "title": "Legacy Constant",
    "description": "Struct-scoped constants are preferred over legacy global constants."
  },
  {
    "patternId": "legacy_constructor",
    "title": "Legacy Constructor",
    "description": "Swift constructors are preferred over legacy convenience functions."
  },
  {
    "patternId": "legacy_hashing",
    "title": "Legacy Hashing",
    "description": "Prefer using the `hash(into:)` function instead of overriding `hashValue`"
  },
  {
    "patternId": "legacy_multiple",
    "title": "Legacy Multiple",
    "description": "Prefer using the `isMultiple(of:)` function instead of using the remainder operator (`%`)."
  },
  {
    "patternId": "legacy_nsgeometry_functions",
    "title": "Legacy NSGeometry Functions",
    "description": "Struct extension properties and methods are preferred over legacy functions"
  },
  {
    "patternId": "legacy_random",
    "title": "Legacy Random",
    "description": "Prefer using `type.random(in:)` over legacy functions."
  },
  {
    "patternId": "let_var_whitespace",
    "title": "Variable Declaration Whitespace",
    "description": "Let and var should be separated from other statements by a blank line."
  },
  {
    "patternId": "line_length",
    "title": "Line Length",
    "description": "Lines should not span too many characters."
  },
  {
    "patternId": "literal_expression_end_indentation",
    "title": "Literal Expression End Indentation",
    "description": "Array and dictionary literal end should have the same indentation as the line that started it."
  },
  {
    "patternId": "lower_acl_than_parent",
    "title": "Lower ACL than parent",
    "description": "Ensure definitions have a lower access control level than their enclosing parent"
  },
  {
    "patternId": "mark",
    "title": "Mark",
    "description": "MARK comment should be in valid format. e.g. '// MARK: ...' or '// MARK: - ...'"
  },
  {
    "patternId": "missing_docs",
    "title": "Missing Docs",
    "description": "Declarations should be documented."
  },
  {
    "patternId": "modifier_order",
    "title": "Modifier Order",
    "description": "Modifier order should be consistent."
  },
  {
    "patternId": "multiline_arguments",
    "title": "Multiline Arguments",
    "description": "Arguments should be either on the same line, or one per line."
  },
  {
    "patternId": "multiline_arguments_brackets",
    "title": "Multiline Arguments Brackets",
    "description": "Multiline arguments should have their surrounding brackets in a new line."
  },
  {
    "patternId": "multiline_function_chains",
    "title": "Multiline Function Chains",
    "description": "Chained function calls should be either on the same line, or one per line."
  },
  {
    "patternId": "multiline_literal_brackets",
    "title": "Multiline Literal Brackets",
    "description": "Multiline literals should have their surrounding brackets in a new line."
  },
  {
    "patternId": "multiline_parameters",
    "title": "Multiline Parameters",
    "description": "Functions and methods parameters should be either on the same line, or one per line."
  },
  {
    "patternId": "multiline_parameters_brackets",
    "title": "Multiline Parameters Brackets",
    "description": "Multiline parameters should have their surrounding brackets in a new line."
  },
  {
    "patternId": "multiple_closures_with_trailing_closure",
    "title": "Multiple Closures with Trailing Closure",
    "description": "Trailing closure syntax should not be used when passing more than one closure argument."
  },
  {
    "patternId": "nesting",
    "title": "Nesting",
    "description": "Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep."
  },
  {
    "patternId": "nimble_operator",
    "title": "Nimble Operator",
    "description": "Prefer Nimble operator overloads over free matcher functions."
  },
  {
    "patternId": "no_extension_access_modifier",
    "title": "No Extension Access Modifier",
    "description": "Prefer not to use extension access modifiers"
  },
  {
    "patternId": "no_fallthrough_only",
    "title": "No Fallthrough Only",
    "description": "Fallthroughs can only be used if the `case` contains at least one other statement."
  },
  {
    "patternId": "no_grouping_extension",
    "title": "No Grouping Extension",
    "description": "Extensions shouldn't be used to group code within the same source file."
  },
  {
    "patternId": "no_space_in_method_call",
    "title": "No Space in Method Call",
    "description": "Don't add a space between the method name and the parentheses."
  },
  {
    "patternId": "notification_center_detachment",
    "title": "Notification Center Detachment",
    "description": "An object should only remove itself as an observer in `deinit`."
  },
  {
    "patternId": "nslocalizedstring_key",
    "title": "NSLocalizedString Key",
    "description": "Static strings should be used as key in NSLocalizedString in order to genstrings work."
  },
  {
    "patternId": "nslocalizedstring_require_bundle",
    "title": "NSLocalizedString Require Bundle",
    "description": "Calls to NSLocalizedString should specify the bundle which contains the strings file."
  },
  {
    "patternId": "nsobject_prefer_isequal",
    "title": "NSObject Prefer isEqual",
    "description": "NSObject subclasses should implement isEqual instead of ==."
  },
  {
    "patternId": "number_separator",
    "title": "Number Separator",
    "description": "Underscores should be used as thousand separator in large decimal numbers."
  },
  {
    "patternId": "object_literal",
    "title": "Object Literal",
    "description": "Prefer object literals over image and color inits."
  },
  {
    "patternId": "opening_brace",
    "title": "Opening Brace Spacing",
    "description": "Opening braces should be preceded by a single space and on the same line as the declaration."
  },
  {
    "patternId": "operator_usage_whitespace",
    "title": "Operator Usage Whitespace",
    "description": "Operators should be surrounded by a single whitespace when they are being used."
  },
  {
    "patternId": "operator_whitespace",
    "title": "Operator Function Whitespace",
    "description": "Operators should be surrounded by a single whitespace when defining them."
  },
  {
    "patternId": "optional_enum_case_matching",
    "title": "Optional Enum Case Match",
    "description": "Matching an enum case against an optional enum without '?' is supported on Swift 5.1 and above."
  },
  {
    "patternId": "orphaned_doc_comment",
    "title": "Orphaned Doc Comment",
    "description": "A doc comment should be attached to a declaration."
  },
  {
    "patternId": "overridden_super_call",
    "title": "Overridden methods call super",
    "description": "Some overridden methods should always call super"
  },
  {
    "patternId": "override_in_extension",
    "title": "Override in Extension",
    "description": "Extensions shouldn't override declarations."
  },
  {
    "patternId": "pattern_matching_keywords",
    "title": "Pattern Matching Keywords",
    "description": "Combine multiple pattern matching bindings by moving keywords out of tuples."
  },
  {
    "patternId": "prefer_self_type_over_type_of_self",
    "title": "Prefer Self Type Over Type of Self",
    "description": "Prefer `Self` over `type(of: self)` when accessing properties or calling methods."
  },
  {
    "patternId": "prefixed_toplevel_constant",
    "title": "Prefixed Top-Level Constant",
    "description": "Top-level constants should be prefixed by `k`."
  },
  {
    "patternId": "private_action",
    "title": "Private Actions",
    "description": "IBActions should be private."
  },
  {
    "patternId": "private_outlet",
    "title": "Private Outlets",
    "description": "IBOutlets should be private to avoid leaking UIKit to higher layers."
  },
  {
    "patternId": "private_over_fileprivate",
    "title": "Private over fileprivate",
    "description": "Prefer `private` over `fileprivate` declarations."
  },
  {
    "patternId": "private_unit_test",
    "title": "Private Unit Test",
    "description": "Unit tests marked private are silently skipped."
  },
  {
    "patternId": "prohibited_interface_builder",
    "title": "Prohibited Interface Builder",
    "description": "Creating views using Interface Builder should be avoided."
  },
  {
    "patternId": "prohibited_super_call",
    "title": "Prohibited calls to super",
    "description": "Some methods should not call super"
  },
  {
    "patternId": "protocol_property_accessors_order",
    "title": "Protocol Property Accessors Order",
    "description": "When declaring properties in protocols, the order of accessors should be `get set`."
  },
  {
    "patternId": "quick_discouraged_call",
    "title": "Quick Discouraged Call",
    "description": "Discouraged call inside 'describe' and/or 'context' block."
  },
  {
    "patternId": "quick_discouraged_focused_test",
    "title": "Quick Discouraged Focused Test",
    "description": "Discouraged focused test. Other tests won't run while this one is focused."
  },
  {
    "patternId": "quick_discouraged_pending_test",
    "title": "Quick Discouraged Pending Test",
    "description": "Discouraged pending test. This test won't run while it's marked as pending."
  },
  {
    "patternId": "raw_value_for_camel_cased_codable_enum",
    "title": "Raw Value For Camel Cased Codable Enum",
    "description": "Camel cased cases of Codable String enums should have raw value."
  },
  {
    "patternId": "reduce_boolean",
    "title": "Reduce Boolean",
    "description": "Prefer using `.allSatisfy()` or `.contains()` over `reduce(true)` or `reduce(false)`"
  },
  {
    "patternId": "reduce_into",
    "title": "Reduce Into",
    "description": "Prefer `reduce(into:_:)` over `reduce(_:_:)` for copy-on-write types"
  },
  {
    "patternId": "redundant_discardable_let",
    "title": "Redundant Discardable Let",
    "description": "Prefer `_ = foo()` over `let _ = foo()` when discarding a result from a function."
  },
  {
    "patternId": "redundant_nil_coalescing",
    "title": "Redundant Nil Coalescing",
    "description": "nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant"
  },
  {
    "patternId": "redundant_objc_attribute",
    "title": "Redundant @objc Attribute",
    "description": "Objective-C attribute (@objc) is redundant in declaration."
  },
  {
    "patternId": "redundant_optional_initialization",
    "title": "Redundant Optional Initialization",
    "description": "Initializing an optional variable with nil is redundant."
  },
  {
    "patternId": "redundant_set_access_control",
    "title": "Redundant Set Access Control Rule",
    "description": "Property setter access level shouldn't be explicit if it's the same as the variable access level."
  },
  {
    "patternId": "redundant_string_enum_value",
    "title": "Redundant String Enum Value",
    "description": "String enum values can be omitted when they are equal to the enumcase name."
  },
  {
    "patternId": "redundant_type_annotation",
    "title": "Redundant Type Annotation",
    "description": "Variables should not have redundant type annotation"
  },
  {
    "patternId": "redundant_void_return",
    "title": "Redundant Void Return",
    "description": "Returning Void in a function declaration is redundant."
  },
  {
    "patternId": "required_deinit",
    "title": "Required Deinit",
    "description": "Classes should have an explicit deinit method."
  },
  {
    "patternId": "required_enum_case",
    "title": "Required Enum Case",
    "description": "Enums conforming to a specified protocol must implement a specific case(s)."
  },
  {
    "patternId": "return_arrow_whitespace",
    "title": "Returning Whitespace",
    "description": "Return arrow and return type should be separated by a single space or on a separate line."
  },
  {
    "patternId": "shorthand_operator",
    "title": "Shorthand Operator",
    "description": "Prefer shorthand operators (+=, -=, *=, /=) over doing the operation and assigning."
  },
  {
    "patternId": "single_test_class",
    "title": "Single Test Class",
    "description": "Test files should contain a single QuickSpec or XCTestCase class."
  },
  {
    "patternId": "sorted_first_last",
    "title": "Min or Max over Sorted First or Last",
    "description": "Prefer using `min()` or `max()` over `sorted().first` or `sorted().last`"
  },
  {
    "patternId": "sorted_imports",
    "title": "Sorted Imports",
    "description": "Imports should be sorted."
  },
  {
    "patternId": "statement_position",
    "title": "Statement Position",
    "description": "Else and catch should be on the same line, one space after the previous declaration."
  },
  {
    "patternId": "static_operator",
    "title": "Static Operator",
    "description": "Operators should be declared as static functions, not free functions."
  },
  {
    "patternId": "strict_fileprivate",
    "title": "Strict fileprivate",
    "description": "`fileprivate` should be avoided."
  },
  {
    "patternId": "strong_iboutlet",
    "title": "Strong IBOutlet",
    "description": "@IBOutlets shouldn't be declared as weak."
  },
  {
    "patternId": "superfluous_disable_command",
    "title": "Superfluous Disable Command",
    "description": "SwiftLint 'disable' commands are superfluous when the disabled rule would not have triggered a violation in the disabled region. Use \" - \" if you wish to document a command."
  },
  {
    "patternId": "switch_case_alignment",
    "title": "Switch and Case Statement Alignment",
    "description": "Case statements should vertically align with their enclosing switch statement, or indented if configured otherwise."
  },
  {
    "patternId": "switch_case_on_newline",
    "title": "Switch Case on Newline",
    "description": "Cases inside a switch should always be on a newline"
  },
  {
    "patternId": "syntactic_sugar",
    "title": "Syntactic Sugar",
    "description": "Shorthand syntactic sugar should be used, i.e. [Int] instead of Array<Int>."
  },
  {
    "patternId": "todo",
    "title": "Todo",
    "description": "TODOs and FIXMEs should be resolved."
  },
  {
    "patternId": "toggle_bool",
    "title": "Toggle Bool",
    "description": "Prefer `someBool.toggle()` over `someBool = !someBool`."
  },
  {
    "patternId": "trailing_closure",
    "title": "Trailing Closure",
    "description": "Trailing closure syntax should be used whenever possible."
  },
  {
    "patternId": "trailing_comma",
    "title": "Trailing Comma",
    "description": "Trailing commas in arrays and dictionaries should be avoided/enforced."
  },
  {
    "patternId": "trailing_newline",
    "title": "Trailing Newline",
    "description": "Files should have a single trailing newline."
  },
  {
    "patternId": "trailing_semicolon",
    "title": "Trailing Semicolon",
    "description": "Lines should not have trailing semicolons."
  },
  {
    "patternId": "trailing_whitespace",
    "title": "Trailing Whitespace",
    "description": "Lines should not have trailing whitespace."
  },
  {
    "patternId": "type_body_length",
    "title": "Type Body Length",
    "description": "Type bodies should not span too many lines."
  },
  {
    "patternId": "type_contents_order",
    "title": "Type Contents Order",
    "description": "Specifies the order of subtypes, properties, methods & more within a type."
  },
  {
    "patternId": "type_name",
    "title": "Type Name",
    "description": "Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length."
  },
  {
    "patternId": "unavailable_function",
    "title": "Unavailable Function",
    "description": "Unimplemented functions should be marked as unavailable."
  },
  {
    "patternId": "unneeded_break_in_switch",
    "title": "Unneeded Break in Switch",
    "description": "Avoid using unneeded break statements."
  },
  {
    "patternId": "unneeded_parentheses_in_closure_argument",
    "title": "Unneeded Parentheses in Closure Argument",
    "description": "Parentheses are not needed when declaring closure arguments."
  },
  {
    "patternId": "unowned_variable_capture",
    "title": "Unowned Variable Capture",
    "description": "Prefer capturing references as weak to avoid potential crashes."
  },
  {
    "patternId": "untyped_error_in_catch",
    "title": "Untyped Error in Catch",
    "description": "Catch statements should not declare error variables without type casting."
  },
  {
    "patternId": "unused_capture_list",
    "title": "Unused Capture List",
    "description": "Unused reference in a capture list should be removed."
  },
  {
    "patternId": "unused_closure_parameter",
    "title": "Unused Closure Parameter",
    "description": "Unused parameter in a closure should be replaced with _."
  },
  {
    "patternId": "unused_control_flow_label",
    "title": "Unused Control Flow Label",
    "description": "Unused control flow label should be removed."
  },
  {
    "patternId": "unused_declaration",
    "title": "Unused Declaration",
    "description": "Declarations should be referenced at least once within all files linted."
  },
  {
    "patternId": "unused_enumerated",
    "title": "Unused Enumerated",
    "description": "When the index or the item is not used, `.enumerated()` can be removed."
  },
  {
    "patternId": "unused_import",
    "title": "Unused Import",
    "description": "All imported modules should be required to make the file compile."
  },
  {
    "patternId": "unused_optional_binding",
    "title": "Unused Optional Binding",
    "description": "Prefer `!= nil` over `let _ =`"
  },
  {
    "patternId": "unused_setter_value",
    "title": "Unused Setter Value",
    "description": "Setter value is not used."
  },
  {
    "patternId": "valid_ibinspectable",
    "title": "Valid IBInspectable",
    "description": "@IBInspectable should be applied to variables only, have its type explicit and be of a supported type"
  },
  {
    "patternId": "vertical_parameter_alignment",
    "title": "Vertical Parameter Alignment",
    "description": "Function parameters should be aligned vertically if they're in multiple lines in a declaration."
  },
  {
    "patternId": "vertical_parameter_alignment_on_call",
    "title": "Vertical Parameter Alignment On Call",
    "description": "Function parameters should be aligned vertically if they're in multiple lines in a method call."
  },
  {
    "patternId": "vertical_whitespace",
    "title": "Vertical Whitespace",
    "description": "Limit vertical whitespace to a single empty line."
  },
  {
    "patternId": "vertical_whitespace_between_cases",
    "title": "Vertical Whitespace Between Cases",
    "description": "Include a single empty line between switch cases."
  },
  {
    "patternId": "vertical_whitespace_closing_braces",
    "title": "Vertical Whitespace before Closing Braces",
    "description": "Don't include vertical whitespace (empty line) before closing braces."
  },
  {
    "patternId": "vertical_whitespace_opening_braces",
    "title": "Vertical Whitespace after Opening Braces",
    "description": "Don't include vertical whitespace (empty line) after opening braces."
  },
  {
    "patternId": "void_return",
    "title": "Void Return",
    "description": "Prefer `-> Void` over `-> ()`."
  },
  {
    "patternId": "weak_delegate",
    "title": "Weak Delegate",
    "description": "Delegates should be weak to avoid reference cycles."
  },
  {
    "patternId": "xct_specific_matcher",
    "title": "XCTest Specific Matcher",
    "description": "Prefer specific XCTest matchers over `XCTAssertEqual` and `XCTAssertNotEqual`"
  },
  {
    "patternId": "xctfail_message",
    "title": "XCTFail Message",
    "description": "An XCTFail call should include a description of the assertion."
  },
  {
    "patternId": "yoda_condition",
    "title": "Yoda condition rule",
    "description": "The variable should be placed on the left, the constant on the right of a comparison operator."
  }
]
